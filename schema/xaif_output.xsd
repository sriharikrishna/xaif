<?xml version="1.0" encoding="UTF-8"?>

<!-- *********************************************************** -->
<!-- XAIF Schema Definition (template handling)                  -->
<!-- Uwe Naumann                                                 -->
<!-- MCS, ANL, 2004                                              -->
<!-- *********************************************************** -->

<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	    xmlns:xaif="http://www.mcs.anl.gov/XAIF"
	    targetNamespace="http://www.mcs.anl.gov/XAIF"
	    version="xaif 1.0 (output)"
            elementFormDefault="qualified"
            attributeFormDefault="unqualified">


<!-- *********************************************************** -->
<!-- Differentiated Subroutine                                   -->
<!-- *********************************************************** -->
 
<xsd:redefine schemaLocation="xaif_base.xsd">
<xsd:group name="BasicBlockBody">
  <xsd:choice>
    <xsd:group ref="xaif:BasicBlockBody"/>
    <xsd:element ref="xaif:DerivativePropagator"/>
    <xsd:element ref="xaif:InlinableSubroutineCall"/>
  </xsd:choice>
</xsd:group>
<xsd:group name="ControlFlowVertexAndEdgeGroup">
  <xsd:choice>
    <xsd:group ref="xaif:ControlFlowVertexAndEdgeGroup"/>
    <xsd:element name="Replacement" type="xaif:ReplacementType"/>
  </xsd:choice>
</xsd:group>
</xsd:redefine>

<!-- *********************************************************** -->
<!-- Deriv(Tgt)=Deriv(Src) -->
<!-- *********************************************************** -->

<xsd:complexType name="SetDerivType">
   <xsd:sequence>
     <xsd:element name="Tgt" type="xaif:VariableReferenceType"
                  minOccurs="1" maxOccurs="1"/>
     <xsd:element name="Src" type="xaif:VariableReferenceType" 
                  minOccurs="1" maxOccurs="1"/>
   </xsd:sequence>
</xsd:complexType>

<!-- *********************************************************** -->
<!-- A*X -->
<!-- *********************************************************** -->

<xsd:complexType name="AXType">
   <xsd:sequence>
      <xsd:element name="A" type="xaif:ExpressionType"
                   minOccurs="1" maxOccurs="1"/>
      <xsd:element name="X" type="xaif:VariableReferenceType"
                   minOccurs="1" maxOccurs="1"/>
   </xsd:sequence>
</xsd:complexType>

<!-- *********************************************************** -->
<!-- Y=A1*X1+A2*X2+... -->
<!-- *********************************************************** -->

<xsd:complexType name="SaxType">
   <xsd:sequence>
      <xsd:element name="AX" type="xaif:AXType"
                   minOccurs="1" maxOccurs="unbounded"/>
      <xsd:element name="Y" type="xaif:VariableReferenceType"
                   minOccurs="1" maxOccurs="1"/>
   </xsd:sequence>
</xsd:complexType>

<!-- *********************************************************** -->
<!-- Y=A1*X1+A2*X2+...+Y -->
<!-- *********************************************************** -->

<xsd:complexType name="SaxpyType">
   <xsd:sequence>
     <xsd:element name="AX" type="xaif:AXType"
                  minOccurs="1" maxOccurs="unbounded"/>
     <xsd:element name="Y" type="xaif:VariableReferenceType"
                  minOccurs="1" maxOccurs="1"/>
   </xsd:sequence>
</xsd:complexType>

<!-- *********************************************************** -->
<!-- Derivative propagator -->
<!-- *********************************************************** -->

<xsd:complexType name="DerivativePropagatorType">
   <xsd:sequence>

     <xsd:choice minOccurs="0" maxOccurs="unbounded">
       <xsd:element name="SetDeriv" type="xaif:SetDerivType"/>
       <xsd:element name="Sax" type="xaif:SaxType"/>
       <xsd:element name="Saxpy" type="xaif:SaxpyType"/>
       <xsd:element name="ZeroDeriv" type="xaif:VariableReferenceType"/>
     </xsd:choice>

   </xsd:sequence>
</xsd:complexType>

<xsd:element name="DerivativePropagator" type="xaif:DerivativePropagatorType"/>

<!-- *********************************************************** -->
<!-- Replacement                                                 -->
<!-- *********************************************************** -->

<xsd:complexType name="ReplacementType">
    <xsd:annotation>
      <xsd:documentation xml:lang="en">
        Code fragments to be inserted into templates
      </xsd:documentation>
    </xsd:annotation>
     
    <xsd:choice minOccurs="0" maxOccurs="unbounded">
      <xsd:element ref="xaif:ControlFlowVertex"></xsd:element>
      <xsd:element name="ControlFlowEdge" type="xaif:EdgeType"></xsd:element>
    </xsd:choice>

    <xsd:attribute name="template_name" type="xsd:string" use="required"/>
    <xsd:attribute name="placeholder" type="xsd:string" use="required"/>
</xsd:complexType>

<!-- *********************************************************** -->
<!-- Inlinable subroutine call                                   -->
<!-- *********************************************************** -->

<xsd:complexType name="ArgumentSubstituteType">
  <xsd:annotation>
    <xsd:documentation xml:lang="en">
      Substitute Expression for dummy argument at given position
      in inlinable subroutine
    </xsd:documentation>
  </xsd:annotation>
  <xsd:complexContent>
    <xsd:extension base="xaif:ExpressionType">
      <xsd:attribute name="position" type="xsd:positiveInteger" use="required"/>
    </xsd:extension>
  </xsd:complexContent>
</xsd:complexType>

<xsd:complexType name="InlinableSubroutineCallType">
  <xsd:annotation>
    <xsd:documentation xml:lang="en">
      Take the body of *subroutine_name and substitute given expressions
      for the corresponding dummy arguments
    </xsd:documentation>
  </xsd:annotation>

  <xsd:sequence>
      <xsd:element name="ArgumentSubstitute" type="ArgumentSubstituteType"
        minOccurs="0" maxOccurs="unbounded"/>
  </xsd:sequence>
  <xsd:attribute name="subroutine_name" type="xsd:string" use="required"/>
  <xsd:attribute name="statement_id" type="xsd:string" use="required"/>
</xsd:complexType>

<xsd:element name="InlinableSubroutineCall" type="xaif:InlinableSubroutineCallType"/>

</xsd:schema>
