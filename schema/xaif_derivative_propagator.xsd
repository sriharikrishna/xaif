<?xml version="1.0" encoding="UTF-8"?>

<!--
  ========== begin copyright notice ==============
  This file is part of
  ---------------
  xaif
  ---------------
  
  DISCLAIMER
  
  THIS INFORMATION IS PROVIDED WITHOUT ANY EXPRESS OR
  IMPLIED WARRANTY. IN PARTICULAR, THERE IS NO WARRANTY
  OF ANY KIND CONCERNING THE FITNESS OF THIS INFORMATION
  FOR ANY PARTICULAR PURPOSE.
  
  General Information:
  The xaif schema is intended for an xml base 
  intermediate representation of numerical programs. 
  Its scope is reduced to represent the numerical 
  kernel of the programs as relevant to a semantic 
  transformation of the numerical computations. 
  It is part of the OpenAD framework.
  The main application is automatic
  differentiation, i.e. the generation of code for
  the computation of derivatives.
  The following people are the principal authors of the
  current version:
    Uwe Naumann
    Boyana Norris
    Jean Utke
  
  For more details about xaif and its use in OpenAD please visit:
    http://www.mcs.anl.gov/openad
  
  This work is partially supported by:
    NSF-ITR grant OCE-0205590
  ========== end copyright notice ==============
-->

<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	    xmlns:xaif="http://www.mcs.anl.gov/XAIF"
	    targetNamespace="http://www.mcs.anl.gov/XAIF"
	    version="xaif 1.0 (derivative propagation)"
            elementFormDefault="qualified"
            attributeFormDefault="unqualified">

<!-- *********************************************************** -->
<!-- Differentiated Basic Block -->
<!-- *********************************************************** -->
 
<xsd:redefine schemaLocation="xaif_base.xsd">
<xsd:group name="BasicBlockBody">
          <xsd:choice>
            <xsd:group ref="xaif:BasicBlockBody"/>
            <xsd:element ref="xaif:DerivativePropagator"/>
          </xsd:choice>
</xsd:group>
</xsd:redefine>


<!-- *********************************************************** -->
<!-- Deriv(Tgt)=Deriv(Src) -->
<!-- *********************************************************** -->

<xsd:complexType name="SetDerivType">
   <xsd:sequence>
     <xsd:element name="Tgt" type="xaif:VariableReferenceType"
                  minOccurs="1" maxOccurs="1"/>
     <xsd:element name="Src" type="xaif:VariableReferenceType" 
                  minOccurs="1" maxOccurs="1"/>
   </xsd:sequence>
</xsd:complexType>

<!-- *********************************************************** -->
<!-- A*X -->
<!-- *********************************************************** -->

<xsd:complexType name="AXType">
   <xsd:sequence>
      <xsd:element name="A" type="xaif:ExpressionType"
                   minOccurs="1" maxOccurs="1"/>
      <xsd:element name="X" type="xaif:VariableReferenceType"
                   minOccurs="1" maxOccurs="1"/>
   </xsd:sequence>
</xsd:complexType>

<!-- *********************************************************** -->
<!-- Y=A1*X1+A2*X2+... -->
<!-- *********************************************************** -->

<xsd:complexType name="SaxType">
   <xsd:sequence>
      <xsd:element name="AX" type="xaif:AXType"
                   minOccurs="1" maxOccurs="unbounded"/>
      <xsd:element name="Y" type="xaif:VariableReferenceType"
                   minOccurs="1" maxOccurs="1"/>
   </xsd:sequence>
</xsd:complexType>

<!-- *********************************************************** -->
<!-- Y=A1*X1+A2*X2+...+Y -->
<!-- *********************************************************** -->

<xsd:complexType name="SaxpyType">
   <xsd:sequence>
     <xsd:element name="AX" type="xaif:AXType"
                  minOccurs="1" maxOccurs="unbounded"/>
     <xsd:element name="Y" type="xaif:VariableReferenceType"
                  minOccurs="1" maxOccurs="1"/>
   </xsd:sequence>
</xsd:complexType>

<!-- *********************************************************** -->
<!-- Derivative propagator -->
<!-- *********************************************************** -->

<xsd:complexType name="DerivativePropagatorType">
   <xsd:sequence>

     <xsd:choice minOccurs="0" maxOccurs="unbounded">
       <xsd:element name="SetDeriv" type="xaif:SetDerivType"/>
       <xsd:element name="Sax" type="xaif:SaxType"/>
       <xsd:element name="Saxpy" type="xaif:SaxpyType"/>
       <xsd:element name="ZeroDeriv" type="xaif:VariableReferenceType"/>
     </xsd:choice>

   </xsd:sequence>
</xsd:complexType>

<xsd:element name="DerivativePropagator" type="xaif:DerivativePropagatorType"/>

</xsd:schema>
